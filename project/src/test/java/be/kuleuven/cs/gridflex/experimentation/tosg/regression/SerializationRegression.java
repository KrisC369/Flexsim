package be.kuleuven.cs.gridflex.experimentation.tosg.regression;

import be.kuleuven.cs.gridflex.domain.energy.dso.r3dp.FlexAllocProblemContext;
import be.kuleuven.cs.gridflex.domain.energy.dso.r3dp.FlexProvider;
import be.kuleuven.cs.gridflex.domain.energy.dso.r3dp.FlexibilityProvider;
import be.kuleuven.cs.gridflex.domain.energy.dso.r3dp.HourlyFlexConstraints;
import be.kuleuven.cs.gridflex.domain.util.data.TimeSeries;
import be.kuleuven.cs.gridflex.domain.util.data.profiles.CongestionProfile;
import be.kuleuven.cs.gridflex.experimentation.tosg.wgmf.ExperimentParams;
import be.kuleuven.cs.gridflex.experimentation.tosg.wgmf.SerializationUtils;
import be.kuleuven.cs.gridflex.persistence.MapDBMemoizationContext;
import be.kuleuven.cs.gridflex.persistence.MemoizationContext;
import be.kuleuven.cs.gridflex.solvers.memoization.immutableViews.AllocResultsView;
import be.kuleuven.cs.gridflex.solvers.memoization.immutableViews.ImmutableSolverProblemContextView;
import com.google.common.base.Supplier;
import com.google.common.collect.Lists;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.Base64;
import java.util.Collection;

import static be.kuleuven.cs.gridflex.experimentation.tosg.wgmf.SerializationUtils.unpickle;
import static be.kuleuven.cs.gridflex.experimentation.tosg.wgmf
        .WgmfGameRunnerVariableDistributionCostsTest.getParams;
import static be.kuleuven.cs.gridflex.experimentation.tosg.wgmf
        .WgmfGameRunnerVariableDistributionCostsTest.loadTestResources;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

/**
 * @author Kristof Coninx <kristof.coninx AT cs.kuleuven.be>
 */
public class SerializationRegression {
    private static final String DB_NAME = "DB";
    private HourlyFlexConstraints constr;
    private FlexibilityProvider provider1;
    private FlexibilityProvider provider2;
    private CongestionProfile congestionProfile;
    private FlexAllocProblemContext context;
    private Supplier<MemoizationContext<ImmutableSolverProblemContextView, AllocResultsView>>
            memoizationSupplier;
    private String HARDCODED_EXPECTED_CONTEXT_SERIALIZATION =
            "";

    @Before
    public void setUp() {
        constr = HourlyFlexConstraints.builder().activationDuration(1)
                .interActivationTime(2).maximumActivations(4).build();
        provider1 = new FlexProvider(200, constr);
        provider2 = new FlexProvider(800, constr);
        ExperimentParams params = getParams("DUMMY");
        congestionProfile = loadTestResources(params).getInputData()
                .getCongestionProfile();
        context = new FlexAllocProblemContext() {
            @Override
            public Collection<FlexibilityProvider> getProviders() {
                return Lists.newArrayList(provider1, provider2);
            }

            @Override
            public TimeSeries getEnergyProfileToMinimizeWithFlex() {
                return congestionProfile;
            }
        };
        memoizationSupplier = () -> MapDBMemoizationContext.builder().setFileName(DB_NAME)
                .ensureFileExists()
                .build();
    }

    @Test
    public void testDeserializeContext() throws IOException, ClassNotFoundException {
        byte[] decoded = Base64.getDecoder().decode(HARDCODED_EXPECTED_CONTEXT_SERIALIZATION);
        ImmutableSolverProblemContextView unpickled = unpickle(decoded,
                ImmutableSolverProblemContextView.class);
        assertEquals(ImmutableSolverProblemContextView.from(context), unpickled);
    }

    @Test
    public void testSerializeContext() throws IOException {
        ImmutableSolverProblemContextView contextV = ImmutableSolverProblemContextView
                .from(context);
        byte[] pickled = SerializationUtils.pickle(contextV);
        String pickledAsb64String = Base64.getEncoder().encodeToString(pickled);

        byte[] decoded = Base64.getDecoder().decode(pickledAsb64String);
        assertEquals(HARDCODED_EXPECTED_CONTEXT_SERIALIZATION, pickledAsb64String);
        assertArrayEquals(pickled, decoded);
    }
}
